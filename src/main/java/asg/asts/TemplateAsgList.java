package asg.asts;

public class TemplateAsgList {

	public static void writeTo(StringBuilder sb, String commonSupertypeName) {
		sb.append("import java.util.*;\n");
		sb.append("\n");
		sb.append("abstract class AsgList<T> implements List<T> {\n");
		sb.append("    private ArrayList<T> list = new ArrayList<>();\n");
		sb.append("\n");
		sb.append("    abstract protected void other_setParentToThis(T t);\n");
		sb.append("    abstract protected void other_clearParent(T t);\n");
		sb.append("\n");
		sb.append("    // -------- core add/remove ----------\n");
		sb.append("    @Override public boolean add(T t) {\n");
		sb.append("        other_setParentToThis(t);\n");
		sb.append("        return list.add(t);\n");
		sb.append("    }\n");
		sb.append("    public void addFront(T t) { add(0, t); }\n");
		sb.append("\n");
		sb.append("    public List<T> removeAll() {\n");
		sb.append("        List<T> result = list;\n");
		sb.append("        // transfer ownership (no copy); create a fresh backing list\n");
		sb.append("        for (int i=0, n=result.size(); i<n; i++) {\n");
		sb.append("            T t = result.get(i);\n");
		sb.append("            other_clearParent(t);\n");
		sb.append("        }\n");
		sb.append("        list = new ArrayList<>(4);\n");
		sb.append("        return result;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public void add(int index, T elem) {\n");
		sb.append("        other_setParentToThis(elem);\n");
		sb.append("        list.add(index, elem);\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public boolean addAll(Collection<? extends T> c) {\n");
		sb.append("        if (c.isEmpty()) return false;\n");
		sb.append("        if (c instanceof List<?>) list.ensureCapacity(list.size() + c.size());\n");
		sb.append("        boolean changed = false;\n");
		sb.append("        for (T t : c) { other_setParentToThis(t); changed |= list.add(t); }\n");
		sb.append("        return changed;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public boolean addAll(int pos, Collection<? extends T> c) {\n");
		sb.append("        if (c.isEmpty()) return false;\n");
		sb.append("        // Insert maintaining order, one pass, parent set once per element\n");
		sb.append("        int i = 0;\n");
		sb.append("        for (T t : c) { other_setParentToThis(t); list.add(pos + (i++), t); }\n");
		sb.append("        return true;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public void clear() {\n");
		sb.append("        for (int i=0, n=list.size(); i<n; i++) other_clearParent(list.get(i));\n");
		sb.append("        list.clear();\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    // -------- queries ----------\n");
		sb.append("    @Override public boolean contains(Object o) { return list.contains(o); }\n");
		sb.append("    @Override public boolean containsAll(Collection<?> c) { return list.containsAll(c); }\n");
		sb.append("    @Override public T get(int index) { return list.get(index); }\n");
		sb.append("    @Override public int indexOf(Object o) { return list.indexOf(o); }\n");
		sb.append("    @Override public boolean isEmpty() { return list.isEmpty(); }\n");
		sb.append("    @Override public int lastIndexOf(Object o) { return list.lastIndexOf(o); }\n");
		sb.append("\n");
		sb.append("    // -------- iterators (ensure remove() clears parent) ----------\n");
		sb.append("    @Override public Iterator<T> iterator() {\n");
		sb.append("        return listIterator();\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public ListIterator<T> listIterator(int index) { return new AsgListIterator(list.listIterator(index)); }\n");
		sb.append("    @Override public ListIterator<T> listIterator() { return new AsgListIterator(list.listIterator()); }\n");
		sb.append("\n");
		sb.append("    class AsgListIterator implements ListIterator<T> {\n");
		sb.append("        private final ListIterator<T> it;\n");
		sb.append("        private T lastElement;\n");
		sb.append("        AsgListIterator(ListIterator<T> it) { this.it = it; }\n");
		sb.append("        @Override public void add(T e) { other_setParentToThis(e); it.add(e); lastElement = null; }\n");
		sb.append("        @Override public boolean hasNext() { return it.hasNext(); }\n");
		sb.append("        @Override public boolean hasPrevious() { return it.hasPrevious(); }\n");
		sb.append("        @Override public T next() { lastElement = it.next(); return lastElement; }\n");
		sb.append("        @Override public int nextIndex() { return it.nextIndex(); }\n");
		sb.append("        @Override public T previous() { lastElement = it.previous(); return lastElement; }\n");
		sb.append("        @Override public int previousIndex() { return it.previousIndex(); }\n");
		sb.append("        @Override public void remove() {\n");
		sb.append("            if (lastElement == null) throw new IllegalStateException();\n");
		sb.append("            other_clearParent(lastElement);\n");
		sb.append("            it.remove();\n");
		sb.append("            lastElement = null;\n");
		sb.append("        }\n");
		sb.append("        @Override public void set(T e) {\n");
		sb.append("            if (lastElement == null) throw new IllegalStateException();\n");
		sb.append("            other_clearParent(lastElement);\n");
		sb.append("            other_setParentToThis(e);\n");
		sb.append("            it.set(e);\n");
		sb.append("            lastElement = e;\n");
		sb.append("        }\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @SuppressWarnings(\"unchecked\")\n");
		sb.append("    @Override public boolean remove(Object o) {\n");
		sb.append("        int idx = list.indexOf(o);\n");
		sb.append("        if (idx >= 0) { other_clearParent((T) list.remove(idx)); return true; }\n");
		sb.append("        return false;\n");
		sb.append("    }\n");
		sb.append("    @Override public T remove(int index) { T t = list.remove(index); other_clearParent(t); return t; }\n");
		sb.append("\n");
		sb.append("    @Override public boolean removeAll(Collection<?> c) {\n");
		sb.append("        if (c.isEmpty()) return false;\n");
		sb.append("        final Set<?> set = (c instanceof Set<?>) ? (Set<?>) c : new HashSet<>(c);\n");
		sb.append("        boolean changed = false;\n");
		sb.append("        ListIterator<T> it = list.listIterator();\n");
		sb.append("        while (it.hasNext()) {\n");
		sb.append("            T t = it.next();\n");
		sb.append("            if (set.contains(t)) { other_clearParent(t); it.remove(); changed = true; }\n");
		sb.append("        }\n");
		sb.append("        return changed;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public boolean retainAll(Collection<?> c) {\n");
		sb.append("        final Set<?> set = (c instanceof Set<?>) ? (Set<?>) c : new HashSet<>(c);\n");
		sb.append("        boolean changed = false;\n");
		sb.append("        ListIterator<T> it = list.listIterator();\n");
		sb.append("        while (it.hasNext()) {\n");
		sb.append("            T t = it.next();\n");
		sb.append("            if (!set.contains(t)) { other_clearParent(t); it.remove(); changed = true; }\n");
		sb.append("        }\n");
		sb.append("        return changed;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public T set(int index, T element) {\n");
		sb.append("        T old = list.get(index);\n");
		sb.append("        if (old == element) return old;\n");
		sb.append("        other_setParentToThis(element);\n");
		sb.append("        list.set(index, element);\n");
		sb.append("        other_clearParent(old);\n");
		sb.append("        return old;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public int size() { return list.size(); }\n");
		sb.append("\n");
		sb.append("    // Ensure subList keeps parent bookkeeping\n");
		sb.append("    @Override public List<T> subList(int fromIndex, int toIndex) {\n");
		sb.append("        final List<T> view = list.subList(fromIndex, toIndex);\n");
		sb.append("        final AsgList<T> self = this;\n");
		sb.append("        return new AbstractList<T>() {\n");
		sb.append("            @Override public T get(int index) { return view.get(index); }\n");
		sb.append("            @Override public int size() { return view.size(); }\n");
		sb.append("            @Override public void add(int index, T element) { self.other_setParentToThis(element); view.add(index, element); }\n");
		sb.append("            @Override public T set(int index, T element) {\n");
		sb.append("                T old = view.get(index);\n");
		sb.append("                if (old == element) return old;\n");
		sb.append("                self.other_setParentToThis(element);\n");
		sb.append("                T r = view.set(index, element);\n");
		sb.append("                self.other_clearParent(r);\n");
		sb.append("                return r;\n");
		sb.append("            }\n");
		sb.append("            @Override public T remove(int index) {\n");
		sb.append("                T r = view.remove(index);\n");
		sb.append("                self.other_clearParent(r);\n");
		sb.append("                return r;\n");
		sb.append("            }\n");
		sb.append("            @Override public Iterator<T> iterator() { return listIterator(); }\n");
		sb.append("            @Override public ListIterator<T> listIterator(int index) {\n");
		sb.append("                ListIterator<T> it = view.listIterator(index);\n");
		sb.append("                return new ListIterator<T>() {\n");
		sb.append("                    T last;\n");
		sb.append("                    @Override public boolean hasNext() { return it.hasNext(); }\n");
		sb.append("                    @Override public T next() { return last = it.next(); }\n");
		sb.append("                    @Override public boolean hasPrevious() { return it.hasPrevious(); }\n");
		sb.append("                    @Override public T previous() { return last = it.previous(); }\n");
		sb.append("                    @Override public int nextIndex() { return it.nextIndex(); }\n");
		sb.append("                    @Override public int previousIndex() { return it.previousIndex(); }\n");
		sb.append("                    @Override public void remove() { if (last==null) throw new IllegalStateException(); self.other_clearParent(last); it.remove(); last = null; }\n");
		sb.append("                    @Override public void set(T e) { if (last==null) throw new IllegalStateException(); self.other_clearParent(last); self.other_setParentToThis(e); it.set(e); last = e; }\n");
		sb.append("                    @Override public void add(T e) { self.other_setParentToThis(e); it.add(e); last = null; }\n");
		sb.append("                };\n");
		sb.append("            }\n");
		sb.append("        };\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @Override public Object[] toArray() { return list.toArray(); }\n");
		sb.append("    @Override public <S> S[] toArray(S[] a) { return list.toArray(a); }\n");
		sb.append("\n");
		sb.append("    // ---------- tree utilities ----------\n");
		sb.append("    public boolean structuralEquals(").append(commonSupertypeName).append(" e) {\n");
		sb.append("        if (e instanceof AsgList) {\n");
		sb.append("            AsgList<?> o = (AsgList<?>) e;\n");
		sb.append("            int n = size(); if (o.size() != n) return false;\n");
		sb.append("            for (int i=0; i<n; i++) {\n");
		sb.append("                ").append(commonSupertypeName).append(" a = (").append(commonSupertypeName).append(") get(i);\n");
		sb.append("                ").append(commonSupertypeName).append(" b = (").append(commonSupertypeName).append(") o.get(i);\n");
		sb.append("                if (!a.structuralEquals(b)) return false;\n");
		sb.append("            }\n");
		sb.append("            return true;\n");
		sb.append("        }\n");
		sb.append("        return false;\n");
		sb.append("    }\n");
		sb.append("\n");
		sb.append("    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n");
		sb.append("    public void forEachElement(java.util.function.Consumer<? super ").append(commonSupertypeName).append("> action) {\n");
		sb.append("        list.forEach((java.util.function.Consumer) action);\n");
		sb.append("    }\n");
		sb.append("    public void trimToSize() { list.trimToSize(); }\n");
		sb.append("\n");
		sb.append("    /** replace first occurrence by identity (==) */\n");
		sb.append("    public boolean replaceExact(Object oldElem, T newElem) {\n");
		sb.append("        ListIterator<T> it = list.listIterator();\n");
		sb.append("        while (it.hasNext()) {\n");
		sb.append("            T curr = it.next();\n");
		sb.append("            if (curr == oldElem) {\n");
		sb.append("                if (curr != null) other_clearParent(curr);\n");
		sb.append("                other_setParentToThis(newElem);\n");
		sb.append("                it.set(newElem);\n");
		sb.append("                return true;\n");
		sb.append("            }\n");
		sb.append("        }\n");
		sb.append("        return false;\n");
		sb.append("    }\n");
		sb.append("}\n");
	}

}
