package asg.asts;

public class TemplateAsgList {

	public static void writeTo(StringBuilder sb, String commonSupertypeName) {
		sb.append("import java.util.Collection;\n");
		sb.append("import java.util.Iterator;\n");
		sb.append("import java.util.ArrayList;\n");
		sb.append("import java.util.List;\n");
		sb.append("import java.util.ListIterator;\n");
		sb.append("\n");
		sb.append("abstract class AsgList<T> implements List<T> {\n");
		sb.append("	\n");
		sb.append("	private ArrayList<T> list = new ArrayList<T>();\n");
		sb.append("	\n");
		sb.append("	abstract protected void other_setParentToThis(T t);\n");
		sb.append("	abstract protected void other_clearParent(T t);\n");
		sb.append("	\n");
		sb.append("	public boolean add(T t) {\n");
		sb.append("		other_setParentToThis(t);\n");
		sb.append("		return list.add(t);\n");
		sb.append("	}\n");
		sb.append("\n");
		
		sb.append("	public void addFront(T t) { add(0, t); }\n");

		sb.append("	public List<T> removeAll() {\n");
		sb.append("		List<T> result = new ArrayList<T>(list);\n");
		sb.append("		for (T t : result) {\n");
		sb.append("			other_clearParent(t);\n");
		sb.append("		}\n");
		sb.append("		list.clear();\n");
		sb.append("		return result;\n");
		sb.append("	}\n");
		
		sb.append("	@Override\n");
		sb.append("	public void add(int index, T elem) {\n");
		sb.append("		other_setParentToThis(elem);\n");
		sb.append("		list.add(index, elem);		\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean addAll(Collection<? extends T> c) {\n");
		sb.append("		for (T t: c) {\n");
		sb.append("			other_setParentToThis(t);\n");
		sb.append("		}\n");
		sb.append("		return list.addAll(c);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean addAll(int pos, Collection<? extends T> c) {\n");
		sb.append("		for (T t: c) {\n");
		sb.append("			other_setParentToThis(t);\n");
		sb.append("		}\n");
		sb.append("		return list.addAll(pos, c);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public void clear() {\n");
		sb.append("		for (T t : list) {\n");
		sb.append("			other_clearParent(t);\n");
		sb.append("		}\n");
		sb.append("		list.clear();\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean contains(Object arg0) {\n");
		sb.append("		return list.contains(arg0);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean containsAll(Collection<?> c) {\n");
		sb.append("		return list.containsAll(c);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public T get(int index) {\n");
		sb.append("		return list.get(index);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public int indexOf(Object o) {\n");
		sb.append("		return list.indexOf(o);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean isEmpty() {\n");
		sb.append("		return list.isEmpty();\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public Iterator<T> iterator() {\n");
		sb.append("		return list.iterator();\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public int lastIndexOf(Object o) {\n");
		sb.append("		return list.lastIndexOf(o);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public ListIterator<T> listIterator(int index) {\n");
		sb.append("		return new AsgListIterator(list.listIterator(index));\n");
		sb.append("	}\n");
		sb.append("	@Override\n");
		sb.append("	public ListIterator<T> listIterator() {\n");
		sb.append("		return new AsgListIterator(list.listIterator());\n");
		sb.append("	}\n");
		sb.append("	\n");
		sb.append("	class AsgListIterator implements ListIterator<T> {\n");
		sb.append("\n");
		sb.append("		private ListIterator<T> it;\n");
		sb.append("		private T lastElement;\n");
		sb.append("\n");
		sb.append("		public AsgListIterator(ListIterator<T> listIterator) {\n");
		sb.append("			this.it = listIterator;\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public void add(T e) {\n");
		sb.append("			other_setParentToThis(e);\n");
		sb.append("			it.add(e);\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public boolean hasNext() {\n");
		sb.append("			return it.hasNext();\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public boolean hasPrevious() {\n");
		sb.append("			return it.hasPrevious();\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public T next() {\n");
		sb.append("			lastElement = it.next();\n");
		sb.append("			return lastElement;\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public int nextIndex() {\n");
		sb.append("			return it.nextIndex();\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public T previous() {\n");
		sb.append("			lastElement = it.previous();\n");
		sb.append("			return lastElement;\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public int previousIndex() {\n");
		sb.append("			return it.previousIndex();\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public void remove() {\n");
		sb.append("			if (lastElement == null) throw new Error();\n");
		sb.append("			other_clearParent(lastElement);\n");
		sb.append("			lastElement = null;\n");
		sb.append("			it.remove();\n");
		sb.append("		}\n");
		sb.append("\n");
		sb.append("		@Override\n");
		sb.append("		public void set(T e) {\n");
		sb.append("			if (lastElement == null) throw new Error();\n");
		sb.append("			other_clearParent(lastElement);\n");
		sb.append("			lastElement = null;\n");
		sb.append("			other_setParentToThis(e);\n");
		sb.append("			it.set(e);\n");
		sb.append("		}\n");
		sb.append("		\n");
		sb.append("	}\n");
		sb.append("\n");

		sb.append(" @SuppressWarnings(\"unchecked\")\n");
		sb.append("	@Override\n");
		sb.append("	public boolean remove(Object o) {\n");
		sb.append("		if (list.remove(o)) {\n");
		sb.append("			other_clearParent((T) o);\n");
		sb.append("			return true;\n");
		sb.append("		}\n");
		sb.append("		return false;\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public T remove(int index) {\n");
		sb.append("		T t = list.remove(index);\n");
		sb.append("		other_clearParent(t);\n");
		sb.append("		return t;\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean removeAll(Collection<?> c) {\n");
		sb.append("		for (T t : list) {\n");
		sb.append("			if (c.contains(t)) {\n");
		sb.append("				other_clearParent(t);\n");
		sb.append("			}\n");
		sb.append("		}\n");
		sb.append("		return list.removeAll(c);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public boolean retainAll(Collection<?> c) {\n");
		sb.append("		for (T t : list) {\n");
		sb.append("			if (!c.contains(t)) {\n");
		sb.append("				other_clearParent(t);\n");
		sb.append("			}\n");
		sb.append("		}\n");
		sb.append("		return list.retainAll(c);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public T set(int index, T element) {\n");
		sb.append("		other_setParentToThis(element);\n");
		sb.append("		T t = list.set(index, element);		\n");
		sb.append("		other_clearParent(t);\n");
		sb.append("		return t;\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public int size() {\n");
		sb.append("		return list.size();\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public List<T> subList(int fromIndex, int toIndex) {\n");
		sb.append("		return list.subList(fromIndex, toIndex);\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public Object[] toArray() {\n");
		sb.append("		return list.toArray();\n");
		sb.append("	}\n");
		sb.append("\n");
		sb.append("	@Override\n");
		sb.append("	public <S> S[] toArray(S[] a) {\n");
		sb.append("		return list.toArray(a);\n");
		sb.append("	}\n");
		sb.append("	\n");
		sb.append("	\n");
		sb.append("	\n");



		sb.append("	public boolean structuralEquals(").append(commonSupertypeName).append(" e) {\n");
		sb.append("		if (e instanceof AsgList) {\n");
		sb.append("			AsgList<?> o = (AsgList<?>) e;\n");
		sb.append("			if (o.size() != size()) {\n");
		sb.append("				return false;\n");
		sb.append("			}\n");
		sb.append("			for (int i=0; i<size(); i++) {\n");
		sb.append("				").append(commonSupertypeName).append(" a = (").append(commonSupertypeName).append(") get(i);\n");
		sb.append("				").append(commonSupertypeName).append(" b = (").append(commonSupertypeName).append(") o.get(i);\n");
		sb.append("				if (!a.structuralEquals(b)) {\n");
		sb.append("					return false;\n");
		sb.append("				}\n");
		sb.append("			}\n");
		sb.append("			return true;\n");
		sb.append("		}\n");
		sb.append("		return false;\n");
		sb.append("	}\n\n");
		sb.append("	@SuppressWarnings({\"unchecked\", \"rawtypes\"})");
		sb.append("	public void forEachElement(java.util.function.Consumer<? super ").append(commonSupertypeName).append("> action) {\n");
		sb.append("		list.forEach((java.util.function.Consumer) action);\n");
		sb.append("	}\n");
		sb.append("	public void trimToSize() {\n");
		sb.append("		list.trimToSize();\n");
		sb.append("	}\n");
		sb.append("}\n");

		
	}

}
