apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'jacoco'

group = 'com.github.peterzeller'
version = '0.9.0'

description = """Abstract Syntax Generator"""

// Define directories and file patterns
String genDir = "$projectDir/src-generated"
def testParseqFiles = fileTree(dir: 'src/test/resources', include: 'test-*.parseq')
def testGenDir = file("$buildDir/generated/sources/test-ast/java")
def pkgPattern = ~/package\s+(\S+)\s*;?/

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(25))
    }
}
tasks.withType(JavaCompile).configureEach { options.release = 25 }

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir genDir
        }
    }
    test {
        java {
            srcDirs += testGenDir
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.13.1"
    implementation 'com.google.guava:guava:33.5.0-jre'
    // Add JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.13.4'
}

// Test AST generation task
tasks.register('generateTestAsts') {
    description = 'Generate AST classes for test cases'
    group = 'build'

    dependsOn 'compileJava'

    inputs.files(testParseqFiles)
    outputs.dir(testGenDir)

    doFirst {
        // Clean the test generation directory before generating
        delete testGenDir
        testGenDir.mkdirs()
    }

    doLast {
        ExecOperations execOps = project.services.get(ExecOperations)
        testParseqFiles.files.each { File f ->
            String contents = f.getText('UTF-8')
            def m = pkgPattern.matcher(contents)
            String pkg = m.find() ? m.group(1) : ""

            // Use testGenDir directly, don't append package path
            // The generator will create the package structure itself

            execOps.javaexec {
                classpath = sourceSets.main.runtimeClasspath
                mainClass.set('asg.Main')
                args(f.absolutePath, testGenDir.absolutePath)
            }
        }
    }
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    executionData fileTree(dir: "$buildDir/jacoco", include: "**/*.exec")

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // Exclude generated ANTLR files
                    '**/parser/**',
                    '**/lexer/**',
                    // Exclude generated AST test files
                    '**/test/expr/**',
                    '**/test/stmt/**',
                    '**/test/refs/**',
                    '**/test/inline/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% minimum coverage
            }
        }
    }
}

test {
    useJUnitPlatform()
    dependsOn 'generateTestAsts'

    // Force test output to be shown
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = false // Set to true for debugging
        showCauses true
        showExceptions true
        showStackTraces true
    }

    // Show summary
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        }
    }

    finalizedBy jacocoTestReport
}

// Make check depend on jacoco
check.dependsOn jacocoTestCoverageVerification


compileTestJava {
    dependsOn 'generateTestAsts'
}

generateGrammarSource {
    outputDirectory = file(genDir)
}

clean.doFirst {
    delete genDir
    delete testGenDir
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    dependsOn 'generateGrammarSource'
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

tasks.register('sourcesJar', Jar) {
    dependsOn 'generateGrammarSource'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'com.github.peterzeller'
            artifactId = 'abstractsyntaxgen'
            version = '0.3.3'
        }
    }
    repositories {
        mavenLocal()
    }
}

// Ensure artifacts are published to mavenLocal() during the build
build.dependsOn publishToMavenLocal
